function [mlTheta, mlSigmaSQ] = MLEfun_EDTI(Y, Z, iTheta, iSigmaSQ, sumYSQ, MLEopts)

nVoxels = size(Y,2);
nDWIs = size(Y,1);
G = gpuDevice(1);
reset(G); % Just in case...
% if G.KernelExecutionTimeout
%     disp('Kernel Execution Timeout detected, please ensure that your OS allows long GPU processess!');
% end
cudaFilename = 'RicianMLE_single.cu';
ptxFilename = 'RicianMLE_single.ptx';
kernel = parallel.gpu.CUDAKernel( ptxFilename, cudaFilename );

mlTheta = single(iTheta);
mlSigmaSQ = single(iSigmaSQ);
nParams = size(Z, 2);
nDeltaParams = nParams - 1;
nCalc = 15000;

fprintf(1, '\nDone:   %d%s\nTime remaining: ???:??\nEstimated time: ???:??', 0, '%');
tic
for N = 1:ceil(nVoxels/nCalc)   
    % Split data into blocks so GPU doesn't run out of memory
    blockInds = ((N-1)*nCalc+1:(N*nCalc));    
    blockInds(blockInds > nVoxels) = [];
    blockTheta = single(iTheta( :, blockInds ));
    blockSigmaSQ = single(iSigmaSQ( blockInds ));
    blockY = Y(:, blockInds);
    blockSumYSQ = sumYSQ( blockInds );
    blockVoxs = length(blockInds);
    

    
    % Initialize arrays needed in GPU memory
%     theta = blockTheta;
%     SigmaSQ = blockSigmaSQ;
%     Z;
    fisherInformation = zeros(nDeltaParams^2, blockVoxs);
    fisherInformation_sym = zeros(nDeltaParams^2, blockVoxs);
    score = zeros(nDeltaParams,blockVoxs);
    DeltaTheta = zeros(nDeltaParams, blockVoxs);
    new_theta = zeros(nDeltaParams, blockVoxs);
    vv = zeros(nDeltaParams, blockVoxs);
    indx = zeros(nDeltaParams, blockVoxs);
    theta_old = zeros(nParams,blockVoxs);
% 	blockY;
    expZTheta = zeros(nDWIs, blockVoxs);
	ZTheta = zeros(nDWIs, blockVoxs);
	twotau = zeros(nDWIs,blockVoxs);
	expo = zeros(nDWIs, blockVoxs);
	EN = zeros(nDWIs,blockVoxs);
	b = zeros(nDWIs, blockVoxs);
	a = zeros(blockVoxs,1);
    c = zeros(blockVoxs,1);  
% 	blockSumYSQ;
	theta1_old = zeros(blockVoxs,1);
    SigmaSQ0 = zeros(blockVoxs,1);
    SigmaSQ_old = zeros(blockVoxs,1);
    tmpvar = zeros(blockVoxs,1);
    scaling = zeros(blockVoxs,1);
    expScaling = zeros(blockVoxs,1);
    loglikelihood = zeros(blockVoxs,1);
	loglikelihood_old = zeros(blockVoxs,1);
    regulatorLambda = zeros(blockVoxs,1);
    DeltaThetaScore = zeros(blockVoxs,1);
    norm1 = zeros(blockVoxs,1);
    norm2 = zeros(blockVoxs,1);
    MLEopts.tolerance_sigmasq;
    MLEopts.tolerance_S0;
    MLEopts.tolerance_theta;
    MLEopts.tolerance_loglikelihood;
    nIterSigmaSQ = zeros(blockVoxs,1);
    nIterVoxel = zeros(blockVoxs,1);
    nIterS0 = zeros(blockVoxs,1);
    nIterTheta = zeros(blockVoxs,1);
    nIterLoglikelihood = zeros(blockVoxs,1);
    continueSigmaSQIteration = zeros(blockVoxs,1);
    continueVoxelIteration = zeros(blockVoxs,1);
    continueS0Iteration = zeros(blockVoxs,1);
    continueThetaIteration = zeros(blockVoxs,1);
    continueLoglikelihoodIteration = zeros(blockVoxs,1);
    anyEN = zeros(blockVoxs,1);
    MLEopts.lambda0;
    MLEopts.rescaling;
    nDWIs;
    nParams;
    nDeltaParams;
    blockVoxs;
    
    % Initialise CUDA kernel
%     reset(G); % Just in case...
%     kernel = parallel.gpu.CUDAKernel( ptxFilename, cudaFilename ); 
%     kernel.ThreadBlockSize = [kernel.MaxThreadsPerBlock, 1, 1];
    kernel.ThreadBlockSize = [kernel.MaxThreadsPerBlock, 1];
%     kernel.ThreadBlockSize = [64, 1];
    kernel.GridSize = [ceil(blockVoxs/kernel.ThreadBlockSize(1)), 1];
    
% 	[blockTheta,blockSigmaSQ,Zo,fisherInformation,...
%      fisherInformation_sym, score, DeltaTheta, new_theta,...
%      vv, indx, theta_old, blockY, expZTheta, ZTheta, twotau,...
%      expo, EN, b, a, c, blockSumYSQ, theta1_old, SigmaSQ0, ...
%      SigmaSQ_old, tmpvar, scaling, expScaling, loglikelihood,...
%      loglikelihood_old, regulatorLambda, DeltaThetaScore, norm1,...
%      norm2,nIterSigmaSQ, nIterVoxel,nIterS0, nIterTheta,...
%      nIterLoglikelihood,continueSigmaSQIteration, ...
%                                     continueVoxelIteration, ...
%                                     continueS0Iteration, ...
%                                     continueThetaIteration, ...
%                                     continueLoglikelihoodIteration, ...
%                                     anyEN]  = feval( kernel, ...
                                    [blockTheta, blockSigmaSQ] = feval( kernel,...
                        		    single(blockTheta), ...
                                    single(blockSigmaSQ), ...
                                    single(Z), ...
                                    single(fisherInformation), ...
                                    single(fisherInformation_sym), ...
                                    single(score), ...
                                    single(DeltaTheta), ...
                                    single(new_theta), ...
                                    single(vv), ...
                                    single(indx), ...
                                    single(theta_old), ...
                                    single(blockY), ...
                                    single(expZTheta), ...
                                    single(ZTheta), ...
                                    single(twotau), ...
                                    single(expo), ...
                                    single(EN), ...
                                    single(b), ...
                                    single(a), ...
                                    single(c), ...  
                                    single(blockSumYSQ), ...
                                    single(theta1_old), ...
                                    single(SigmaSQ0), ...
                                    single(SigmaSQ_old), ...
                                    single(tmpvar) ,...
                                    single(scaling), ...
                                    single(expScaling), ...
                                    single(loglikelihood), ...
                                    single(loglikelihood_old), ...
                                    single(regulatorLambda), ...
                                    single(DeltaThetaScore), ...
                                    single(norm1), ...
                                    single(norm2), ...
                                    single(nIterSigmaSQ), ...
                                    single(nIterVoxel), ...
                                    single(nIterS0), ...
                                    single(nIterTheta), ...
                                    single(nIterLoglikelihood), ... 
                                    single(continueSigmaSQIteration), ...
                                    single(continueVoxelIteration), ...
                                    single(continueS0Iteration), ...
                                    single(continueThetaIteration), ...
                                    single(continueLoglikelihoodIteration), ...
                                    single(anyEN), ...                                    
                                    single(MLEopts.tolerance_sigmasq), ...
                                    single(MLEopts.tolerance_S0), ...
                                    single(MLEopts.tolerance_theta), ...
                                    single(MLEopts.tolerance_loglikelihood), ...
                                    single(MLEopts.iter_limit_sigmasq) ,...
                                    single(MLEopts.iter_limit_voxel) ,...
                                    single(MLEopts.iter_limit_S0) ,...
                                    single(MLEopts.iter_limit_theta) ,...
                                    single(MLEopts.iter_limit) ,...
                                    single(MLEopts.lambda0), ...
                                    single(MLEopts.rescaling), ...
                                    single(nDWIs), ...
                                    single(nParams), ...
                                    single(nDeltaParams), ...
                                    single(blockVoxs));

	mlTheta(:, blockInds) = gather(blockTheta);
	mlSigmaSQ(blockInds) = gather(blockSigmaSQ);   
    
    timesofar = toc;     
    totalTimeSeconds = timesofar / blockInds(end) * nVoxels;
    TimeEstimateMinutes = floor(totalTimeSeconds / 60);
    TimeEstimateSeconds = round(totalTimeSeconds - TimeEstimateMinutes*60);
    TimeRemainingMinutes = floor((totalTimeSeconds-timesofar)/60);
    TimeRemainingSeconds = round(totalTimeSeconds-timesofar-TimeRemainingMinutes*60);
    
    if TimeEstimateSeconds < 10
        strSest = ['0', num2str(TimeEstimateSeconds)];
    else
        strSest = num2str(TimeEstimateSeconds);
    end
    if TimeRemainingSeconds < 10
        strSrem = ['0', num2str(TimeRemainingSeconds)];
    else
        strSrem = num2str(TimeRemainingSeconds);
    end
    if TimeEstimateMinutes < 10
        strMest = ['  ', num2str(TimeEstimateMinutes)];
    elseif TimeEstimateMinutes < 100
        strMest = [' ', num2str(TimeEstimateMinutes)];
    else
        strMest = num2str(TimeEstimateMinutes);
    end
    if TimeRemainingMinutes < 10
        strMrem = ['  ', num2str(TimeRemainingMinutes)];
    elseif TimeRemainingMinutes < 100
        strMrem = [' ', num2str(TimeRemainingMinutes)];
    else
        strMrem = num2str(TimeRemainingMinutes);
    end    
    donePercentage = round(N/ceil(nVoxels/blockVoxs)*100);
    if donePercentage < 10
        strD = ['  ', num2str(donePercentage)];
    elseif donePercentage < 100
        strD = [' ', num2str(donePercentage)];
    else
        strD = num2str(donePercentage);
    end
    fprintf(1, [repmat('\b', [1,56]), 'Done: %s%s\nTime remaining: %s:%s\nEstimated time: %s:%s'], strD, '%', strMrem, strSrem, strMest, strSest);
%     fprintf(1, 'Time remaining: %d:%s', TimeRemainingMinutes, strTrem);
%     fprintf(1, 'Estimated time: %d:%s', TimeEstimateMinutes, strTest);
    
%     disp(['Done: ', num2str(round(N/ceil(nVoxels/blockVoxs)*100)), '%']);
%     if TimeEstimateSeconds > 9
%         disp(['Estimated computing time: ' num2str(TimeEstimateMinutes), ':', ...
%             num2str(TimeEstimateSeconds)]);
%     else
%         disp(['Estimated computing time: ' num2str(TimeEstimateMinutes), ':0', ...
%             num2str(TimeEstimateSeconds)]);
%     end
%     if TimeRemainingSeconds > 9
%         disp(['Estimated time remaining: ', num2str(TimeRemainingMinutes), ':', ...
%             num2str(TimeRemainingSeconds)]);
%     else
%         disp(['Estimated time remaining: ', num2str(TimeRemainingMinutes), ':0', ...
%             num2str(TimeRemainingSeconds)]);
%     end
end
fprintf(1, '\n');
end